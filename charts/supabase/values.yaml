# Default values for supabase.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global configuration
# 全局配置，适用于所有服务
# imageRegistry: 镜像仓库前缀
# imagePullSecrets: 镜像拉取密钥
# storageClass: 默认存储类
# 示例：
# global:
#   imageRegistry: "registry.cn-hangzhou.aliyuncs.com"
#   imagePullSecrets:
#     - name: my-docker-secret
#   storageClass: "fast-ssd"
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# PostgreSQL configuration
# PostgreSQL 相关配置
# 示例：
# postgres:
#   port: 5432
#   database: supabase
postgres:
  port: 5432
  database: postgres

# Secrets configuration
# 各服务用到的敏感信息，建议通过 secret 管理
# 支持两种方式：
# 1. 自动创建 Secret（默认）
# 2. 使用已存在的 Secret（通过 externalSecrets 配置）
# 示例：
# secrets:
#   postgresPassword: "your-secure-password"
#   jwtSecret: "your-jwt-secret"
#   anonKey: "your-anon-key"
#   serviceRoleKey: "your-service-role-key"
#   dashboardUsername: "admin"
#   dashboardPassword: "admin123"
#   secretKeyBase: "your-secret-key-base"
#   vaultEncKey: "your-vault-key"
#   logflarePublicAccessToken: "logflare-public"
#   logflarePrivateAccessToken: "logflare-private"
#   # S3/MinIO 存储密钥
#   s3AccessKey: "minioadmin"
#   s3SecretKey: "minioadmin"
# 
# # 使用外部 Secret（External Secrets Operator 等）
# externalSecrets:
#   enabled: true
#   secretName: "supabase-external-secrets"
#   # 可选：指定命名空间，默认使用当前命名空间
#   namespace: "supabase"
secrets:
  postgresPassword: "your-super-secret-and-long-postgres-password"
  jwtSecret: "your-super-secret-jwt-token-with-at-least-32-characters-long"
  anonKey: "your-anon-key"
  serviceRoleKey: "your-service-role-key"
  dashboardUsername: "supabase"
  dashboardPassword: "this_password_is_insecure_and_should_be_updated"
  secretKeyBase: "your-secret-key-base"
  vaultEncKey: "your-vault-encryption-key"
  logflarePublicAccessToken: "your-logflare-public-access-token"
  logflarePrivateAccessToken: "your-logflare-private-access-token"
  # S3/MinIO 存储密钥
  s3AccessKey: "minioadmin"
  s3SecretKey: "minioadmin"

# External Secrets 配置
# 当使用 External Secrets Operator 或其他外部 Secret 管理工具时启用
externalSecrets:
  enabled: false
  secretName: ""  # 外部 Secret 的名称
  namespace: ""   # 外部 Secret 的命名空间，留空使用当前命名空间

# =============================================================================
# 按照官方 docker-compose 顺序排列的服务配置
# =============================================================================

# Studio configuration
# Supabase Studio 管理界面
# 示例：
# studio:
#   enabled: true
#   replicaCount: 1
#   image:
#     repository: supabase/studio
#     tag: "2025.06.02-sha-8f2993d"
#     pullPolicy: IfNotPresent
#   environment:
#     defaultOrganizationName: "MyOrg"
#     defaultProjectName: "MyProject"
#     openaiApiKey: "sk-xxxx"
#     supabasePublicUrl: "http://localhost:8000"
#     nextPublicEnableLogs: "true"
#     nextAnalyticsBackendProvider: "postgres"
#   extraEnv:
#     - name: TZ
#       value: Asia/Shanghai
studio:
  enabled: true
  replicaCount: 1
  image:
    repository: supabase/studio
    tag: "2025.06.02-sha-8f2993d"
    pullPolicy: IfNotPresent
  resources: {}
  environment:
    defaultOrganizationName: "Default Organization"
    defaultProjectName: "Default Project"
    openaiApiKey: ""
    supabasePublicUrl: "http://localhost:8000"
    nextPublicEnableLogs: "true"
    nextAnalyticsBackendProvider: "postgres"
  # Health check configuration
  livenessProbe:
    httpGet:
      path: /api/platform/profile
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: /api/platform/profile
      port: http
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
  extraEnv: []

# Kong API Gateway configuration
# Kong API 网关
# 示例：
# kong:
#   enabled: true
#   replicaCount: 1
#   image:
#     repository: kong
#     tag: "2.8.1"
#     pullPolicy: IfNotPresent
#   service:
#     type: ClusterIP
#     port: 8000
#     httpsPort: 8443
#   extraEnv:
#     - name: TZ
#       value: Asia/Shanghai
kong:
  enabled: true
  replicaCount: 1
  image:
    repository: kong
    tag: "2.8.1"
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 8000
    httpsPort: 8443
  resources: {}
  livenessProbe:
    httpGet:
      path: /status
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
  readinessProbe:
    httpGet:
      path: /status
      port: http
    initialDelaySeconds: 5
    periodSeconds: 5
  extraEnv: []

# Auth service configuration
# 用户认证服务
# 示例：
# auth:
#   enabled: true
#   image:
#     repository: supabase/gotrue
#     tag: v2.174.0
#   apiExternalUrl: "http://localhost:8000"
#   siteUrl: "http://localhost:3000"
#   jwtExpiry: "3600"
#   enableEmailSignup: "true"
#   smtp:
#     adminEmail: "admin@your.com"
#     host: "smtp.your.com"
#     port: "587"
#     user: "user"
#     pass: "pass"
#     senderName: "Supabase"
#   extraEnv:
#     - name: TZ
#       value: Asia/Shanghai
auth:
  enabled: true
  replicaCount: 1
  image:
    repository: supabase/gotrue
    tag: "v2.174.0"
    pullPolicy: IfNotPresent
  apiExternalUrl: "http://localhost:8000"
  siteUrl: "http://localhost:3000"
  additionalRedirectUrls: ""
  disableSignup: "false"
  jwtExpiry: "3600"
  enableEmailSignup: "true"
  enableAnonymousUsers: "false"
  enableEmailAutoconfirm: "false"
  enablePhoneSignup: "false"
  enablePhoneAutoconfirm: "false"
  smtp:
    adminEmail: ""
    host: ""
    port: "587"
    user: ""
    pass: ""
    senderName: ""
  resources: {}
  livenessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
  readinessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 5
    periodSeconds: 5
  extraEnv: []

# REST API service configuration
# PostgREST 服务
# 示例：
# rest:
#   enabled: true
#   image:
#     repository: postgrest/postgrest
#     tag: v12.2.12
#   dbSchemas: "public,storage,graphql_public"
#   jwtExpiry: "3600"
#   extraEnv:
#     - name: TZ
#       value: Asia/Shanghai
rest:
  enabled: true
  replicaCount: 1
  image:
    repository: postgrest/postgrest
    tag: "v12.2.12"
    pullPolicy: IfNotPresent
  dbSchemas: "public,storage,graphql_public"
  jwtExpiry: "3600"
  resources: {}
  livenessProbe:
    httpGet:
      path: /
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
  readinessProbe:
    httpGet:
      path: /
      port: http
    initialDelaySeconds: 5
    periodSeconds: 5
  extraEnv: []

# Realtime service configuration
# Realtime websocket 服务
# 示例：
# realtime:
#   enabled: true
#   image:
#     repository: supabase/realtime
#     tag: v2.34.47
#   extraEnv:
#     - name: TZ
#       value: Asia/Shanghai
realtime:
  enabled: true
  replicaCount: 1
  image:
    repository: supabase/realtime
    tag: "v2.34.47"
    pullPolicy: IfNotPresent
  resources: {}
  livenessProbe:
    httpGet:
      path: /api/tenants/realtime-dev/health
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
  readinessProbe:
    httpGet:
      path: /api/tenants/realtime-dev/health
      port: http
    initialDelaySeconds: 5
    periodSeconds: 5
  extraEnv: []

# Storage service configuration
# 文件存储服务，支持本地和 S3
# 示例：
# storage:
#   enabled: true
#   backend: "s3"
#   fileSizeLimit: "52428800"
#   s3:
#     bucket: "supabase-storage"
#     region: "us-east-1"
#     endpoint: "http://minio:9000"
#     protocol: "http"
#     forcePathStyle: true
#     defaultRegion: "us-east-1"
#   extraEnv:
#     - name: TZ
#       value: Asia/Shanghai
storage:
  enabled: true
  replicaCount: 1
  image:
    repository: supabase/storage-api
    tag: "v1.23.0"
    pullPolicy: IfNotPresent
  backend: "file"  # "file" 或 "s3"，默认本地存储。若需 S3/MinIO，请将此处改为 "s3"
  fileSizeLimit: "52428800"
  persistence:
    enabled: true
    accessMode: ReadWriteOnce
    size: 10Gi
    storageClass: ""
  # S3/MinIO 配置，仅在 backend: s3 时生效
  s3:
    bucket: "supabase-storage"      # S3 桶名，若使用本地存储可忽略
    region: "us-east-1"            # S3 区域，若使用本地存储可忽略
    endpoint: ""                   # S3 兼容服务地址，如 MinIO，留空自动推断
    protocol: "https"              # "http" 或 "https"，如用 MinIO 建议 http
    forcePathStyle: true            # MinIO 需设为 true，AWS S3 可为 false
    defaultRegion: "us-east-1"     # 默认区域，通常与 region 保持一致
    # accessKey 和 secretKey 统一从 secrets 获取
  resources: {}
  livenessProbe:
    httpGet:
      path: /status
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
  readinessProbe:
    httpGet:
      path: /status
      port: http
    initialDelaySeconds: 5
    periodSeconds: 5
  extraEnv: []

# Imgproxy service configuration
# 图片代理服务
# 示例：
# imgproxy:
#   enabled: true
#   image:
#     repository: darthsim/imgproxy
#     tag: v3.8.0
#   enableWebpDetection: "true"
#   extraEnv:
#     - name: TZ
#       value: Asia/Shanghai
imgproxy:
  enabled: true
  replicaCount: 1
  image:
    repository: darthsim/imgproxy
    tag: "v3.8.0"
    pullPolicy: IfNotPresent
  enableWebpDetection: "true"
  resources: {}
  livenessProbe:
    exec:
      command:
      - imgproxy
      - health
    initialDelaySeconds: 30
    periodSeconds: 10
  readinessProbe:
    exec:
      command:
      - imgproxy
      - health
    initialDelaySeconds: 5
    periodSeconds: 5
  extraEnv: []

# Meta service configuration
# 数据库元数据服务
# 示例：
# meta:
#   enabled: true
#   image:
#     repository: supabase/postgres-meta
#     tag: v0.89.3
#   extraEnv:
#     - name: TZ
#       value: Asia/Shanghai
meta:
  enabled: true
  replicaCount: 1
  image:
    repository: supabase/postgres-meta
    tag: "v0.89.3"
    pullPolicy: IfNotPresent
  resources: {}
  livenessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
  readinessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 5
    periodSeconds: 5
  extraEnv: []

# Analytics service configuration
# 日志与分析服务
# 示例：
# analytics:
#   enabled: true
#   image:
#     repository: supabase/logflare
#     tag: 1.14.2
#   extraEnv:
#     - name: TZ
#       value: Asia/Shanghai
analytics:
  enabled: true
  replicaCount: 1
  image:
    repository: supabase/logflare
    tag: "1.14.2"
    pullPolicy: IfNotPresent
  resources: {}
  livenessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
  readinessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 5
    periodSeconds: 5
  extraEnv: []

# Functions service configuration
# Edge Functions 服务
# 示例：
# functions:
#   enabled: true
#   image:
#     repository: supabase/edge-runtime
#     tag: v1.67.4
#   verifyJwt: "true"
#   persistence:
#     enabled: true
#     size: 1Gi
#   extraEnv:
#     - name: TZ
#       value: Asia/Shanghai
functions:
  enabled: true
  replicaCount: 1
  image:
    repository: supabase/edge-runtime
    tag: "v1.67.4"
    pullPolicy: IfNotPresent
  verifyJwt: "true"
  persistence:
    enabled: true
    accessMode: ReadWriteOnce
    size: 1Gi
    storageClass: ""
  resources: {}
  livenessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
  readinessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 5
    periodSeconds: 5
  extraEnv: []

# Database configuration
# PostgreSQL 数据库
# 示例：
# database:
#   enabled: true
#   image:
#     repository: supabase/postgres
#     tag: 15.8.1.060
#   persistence:
#     enabled: true
#     size: 20Gi
#   extraEnv:
#     - name: TZ
#       value: Asia/Shanghai
database:
  enabled: true
  image:
    repository: supabase/postgres
    tag: "15.8.1.060"
    pullPolicy: IfNotPresent
  jwtExpiry: "3600"
  persistence:
    enabled: true
    accessMode: ReadWriteOnce
    size: 20Gi
    storageClass: ""
  # Pod 级安全上下文
  podSecurityContext:
    runAsUser: 999
    runAsGroup: 999
    fsGroup: 999
  # 容器级安全上下文
  securityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: false
  resources: {}
  livenessProbe:
    exec:
      command:
      - pg_isready
      - -U
      - postgres
      - -h
      - localhost
    initialDelaySeconds: 30
    periodSeconds: 10
  readinessProbe:
    exec:
      command:
      - pg_isready
      - -U
      - postgres
      - -h
      - localhost
    initialDelaySeconds: 5
    periodSeconds: 5
  extraEnv: []

# Pooler configuration
# 连接池服务
# 示例：
# pooler:
#   enabled: true
#   image:
#     repository: supabase/supavisor
#     tag: 2.5.1
#   proxyPort: 6543
#   defaultPoolSize: "15"
#   maxClientConn: "100"
#   dbPoolSize: "10"
#   extraEnv:
#     - name: TZ
#       value: Asia/Shanghai
pooler:
  enabled: true
  replicaCount: 1
  image:
    repository: supabase/supavisor
    tag: "2.5.1"
    pullPolicy: IfNotPresent
  proxyPort: 6543
  tenantId: "local"
  defaultPoolSize: "15"
  maxClientConn: "100"
  dbPoolSize: "10"
  resources: {}
  livenessProbe:
    httpGet:
      path: /api/health
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
  readinessProbe:
    httpGet:
      path: /api/health
      port: http
    initialDelaySeconds: 5
    periodSeconds: 5
  extraEnv: []

# Ingress configuration
# 入口配置
# 示例：
# ingress:
#   enabled: true
#   className: "nginx"
#   annotations:
#     kubernetes.io/ingress.class: nginx
#   hosts:
#     - host: supabase.local
#       paths:
#         - path: /
#           pathType: Prefix
#   tls:
#     - secretName: supabase-tls
#       hosts:
#         - supabase.local
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: supabase.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

# Service account configuration
# 服务账号配置
# 示例：
# serviceAccount:
#   create: true
#   automount: true
#   annotations: {}
#   name: ""
serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""

# Pod annotations and labels
# podAnnotations/podLabels: Pod 级别的自定义注解和标签
podAnnotations: {}
podLabels: {}

# Pod security context
podSecurityContext: {}

# Container security context
securityContext: {}

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

{{- if .Values.functions.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "supabase.fullname" . }}-functions
  labels:
    {{- include "supabase.labels" . | nindent 4 }}
    app.kubernetes.io/component: functions
spec:
  replicas: {{ .Values.functions.replicaCount }}
  selector:
    matchLabels:
      {{- include "supabase.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: functions
  template:
    metadata:
      labels:
        {{- include "supabase.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: functions
    spec:
      containers:
      - name: functions
        image: {{ .Values.functions.image.repository }}:{{ .Values.functions.image.tag }}
        imagePullPolicy: {{ .Values.functions.image.pullPolicy }}
        ports:
        - containerPort: 9000
          name: http
        env:
        {{- $defaultEnv := list }}
        {{- $defaultEnv = append $defaultEnv (dict "name" "JWT_SECRET" "valueFrom" (dict "secretKeyRef" (dict "name" (include "supabase.secretName" .) "key" "jwt-secret"))) }}
        {{- $defaultEnv = append $defaultEnv (dict "name" "SUPABASE_URL" "value" (printf "http://%s-kong:8000" (include "supabase.fullname" .))) }}
        {{- $defaultEnv = append $defaultEnv (dict "name" "SUPABASE_ANON_KEY" "valueFrom" (dict "secretKeyRef" (dict "name" (include "supabase.secretName" .) "key" "anon-key"))) }}
        {{- $defaultEnv = append $defaultEnv (dict "name" "SUPABASE_SERVICE_ROLE_KEY" "valueFrom" (dict "secretKeyRef" (dict "name" (include "supabase.secretName" .) "key" "service-role-key"))) }}
        {{- $defaultEnv = append $defaultEnv (dict "name" "SUPABASE_DB_URL" "value" (printf "postgresql://postgres:%s@%s-db:%s/%s" (.Values.secrets.postgresPassword | quote) (include "supabase.fullname" .) (.Values.database.postgres.port | quote) (.Values.database.postgres.database | quote))) }}
        {{- $defaultEnv = append $defaultEnv (dict "name" "VERIFY_JWT" "value" .Values.functions.verifyJwt) }}
        {{- include "supabase.envVars" (dict "env" $defaultEnv "overrides" .Values.functions.envOverrides) | nindent 8 }}
        {{- with .Values.functions.extraEnv }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        volumeMounts:
        - name: functions-data
          mountPath: /home/deno/functions
        command:
        - "start"
        - "--main-service"
        - "/home/deno/functions/main"
        livenessProbe:
          {{- toYaml .Values.functions.livenessProbe | nindent 10 }}
        readinessProbe:
          {{- toYaml .Values.functions.readinessProbe | nindent 10 }}
        resources:
          {{- toYaml .Values.functions.resources | nindent 10 }}
      volumes:
      - name: functions-data
        {{- if .Values.functions.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ include "supabase.fullname" . }}-functions-pvc
        {{- else }}
        emptyDir: {}
        {{- end }}
{{- end }} 
{{- if .Values.database.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "supabase.fullname" . }}-db
  labels:
    {{- include "supabase.labels" . | nindent 4 }}
    app.kubernetes.io/component: database
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "supabase.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: database
  template:
    metadata:
      labels:
        {{- include "supabase.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: database
    spec:
      {{- with .Values.database.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        {{- if .Values.database.initContainers }}
        {{- toYaml .Values.database.initContainers | nindent 8 }}
        {{- end }}
        - name: setup-init-scripts
          image: busybox
          command:
            - sh
            - -c
            - |
              # 创建目录结构
              mkdir -p /docker-entrypoint-initdb.d/migrations
              mkdir -p /docker-entrypoint-initdb.d/init-scripts
              # 复制文件到正确位置
              cp /tmp/99-jwt.sql /docker-entrypoint-initdb.d/init-scripts/99-jwt.sql
              cp /tmp/99-realtime.sql /docker-entrypoint-initdb.d/migrations/99-realtime.sql
              cp /tmp/98-webhooks.sql /docker-entrypoint-initdb.d/init-scripts/98-webhooks.sql
              cp /tmp/99-roles.sql /docker-entrypoint-initdb.d/init-scripts/99-roles.sql
              cp /tmp/97-_supabase.sql /docker-entrypoint-initdb.d/migrations/97-_supabase.sql
              cp /tmp/99-logs.sql /docker-entrypoint-initdb.d/migrations/99-logs.sql
              cp /tmp/99-pooler.sql /docker-entrypoint-initdb.d/migrations/99-pooler.sql
              chmod 644 /docker-entrypoint-initdb.d/migrations/*
              chmod 644 /docker-entrypoint-initdb.d/init-scripts/*
          volumeMounts:
            - name: init-scripts
              mountPath: /docker-entrypoint-initdb.d
            - name: init-scripts-config
              mountPath: /tmp
      containers:
      - name: postgres
        image: {{ .Values.database.image.repository }}:{{ .Values.database.image.tag }}
        imagePullPolicy: {{ .Values.database.image.pullPolicy }}
        {{- with .Values.database.securityContext }}
        securityContext:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        ports:
        - containerPort: {{ .Values.database.postgres.port }}
          name: postgresql
        env:
        - name: POSTGRES_HOST
          value: "/var/run/postgresql"
        - name: POSTGRES_PORT
          value: {{ .Values.database.postgres.port | quote }}
        - name: PGPORT
          value: {{ .Values.database.postgres.port | quote }}
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "supabase.secretName" . }}
              key: postgres-password
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "supabase.secretName" . }}
              key: postgres-password
        - name: POSTGRES_DB
          value: {{ .Values.database.postgres.database | quote }}
        - name: PGDATABASE
          value: {{ .Values.database.postgres.database | quote }}
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ include "supabase.secretName" . }}
              key: jwt-secret
        - name: JWT_EXPIRY
          value: {{ .Values.database.jwtExpiry | quote }}
        {{- with .Values.database.extraEnv }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
            - -h
            - localhost
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
            - -h
            - localhost
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          {{- toYaml .Values.database.resources | nindent 10 }}
      volumes:
      - name: postgres-data
        {{- if .Values.database.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ include "supabase.fullname" . }}-db-pvc
        {{- else }}
        emptyDir: {}
        {{- end }}
      - name: init-scripts
        emptyDir: {}
      - name: init-scripts-config
        configMap:
          name: {{ include "supabase.fullname" . }}-init-scripts
{{- end }} 
apiVersion: v1
kind: ConfigMap
metadata:
  name: supabase-vector-config
  labels:
    app: supabase-vector
    component: vector
data:
  vector.yml: |
    api:
      enabled: true
      address: 0.0.0.0:9001

    sources:
      # HTTP input for receiving logs from other services
      http_input:
        type: http_server
        address: 0.0.0.0:8080
        encoding: json

      # Internal logs source for vector itself
      internal_logs:
        type: internal_logs

    transforms:
      # Simple log processing
      process_logs:
        type: remap
        inputs:
          - http_input
          - internal_logs
        source: |-
          .project = "default"
          .timestamp = now()
          if !exists(.appname) {
            .appname = "unknown"
          }

      # Simple router for different log types
      router:
        type: route
        inputs:
          - process_logs
        route:
          auth: '.appname == "supabase-auth" || (exists(.message) && contains(string!(.message), "auth"))'
          db: '.appname == "supabase-db" || (exists(.message) && contains(string!(.message), "postgres"))'
          analytics: '.appname == "supabase-analytics" || (exists(.message) && contains(string!(.message), "logflare"))'
          other: 'true'  # catch-all



    sinks:
      # Send auth logs to analytics
      logflare_auth:
        type: 'http'
        inputs:
          - router.auth
        encoding:
          codec: 'json'
        method: 'post'
        request:
          retry_max_duration_secs: 10
        headers:
          x-api-key: ${LOGFLARE_PUBLIC_ACCESS_TOKEN?LOGFLARE_PUBLIC_ACCESS_TOKEN is required}
        uri: 'http://supabase-analytics:4000/api/logs?source_name=gotrue.logs.prod'

      # Send database logs to analytics
      logflare_db:
        type: 'http'
        inputs:
          - router.db
        encoding:
          codec: 'json'
        method: 'post'
        request:
          retry_max_duration_secs: 10
        headers:
          x-api-key: ${LOGFLARE_PUBLIC_ACCESS_TOKEN?LOGFLARE_PUBLIC_ACCESS_TOKEN is required}
        uri: 'http://supabase-analytics:4000/api/logs?source_name=postgres.logs'

      # Send other logs to analytics
      logflare_other:
        type: 'http'
        inputs:
          - router.other
        encoding:
          codec: 'json'
        method: 'post'
        request:
          retry_max_duration_secs: 10
        headers:
          x-api-key: ${LOGFLARE_PUBLIC_ACCESS_TOKEN?LOGFLARE_PUBLIC_ACCESS_TOKEN is required}
        uri: 'http://supabase-analytics:4000/api/logs?source_name=supabase.logs'

      # Console output for debugging
      console:
        type: console
        inputs:
          - router.other
        encoding:
          codec: json
